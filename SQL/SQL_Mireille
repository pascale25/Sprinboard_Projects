/* QUESTIONS 
/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */

SELECT name 
FROM Facilities
WHERE membercost > 0;


/* Q2: How many facilities do not charge a fee to members? */

SELECT COUNT( name )
FROM Facilities
WHERE membercost =0;


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question.*/

SELECT facid, name, membercost, monthlymaintenance
FROM Facilities
WHERE membercost > 0.0
AND membercost < ( 0.2 * monthlymaintenance );


/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */


SELECT *
FROM Facilities
WHERE facid in ( 1 , 5);


/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */

SELECT name,
	CASE WHEN monthlymaintenance < 100 THEN 'cheap'
	ELSE 'expensive'
	END as monthlymaintenance_class
FROM Facilities;


/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */

SELECT M.firstname, M.surname
FROM Members AS M
INNER JOIN Bookings AS B ON M.memid = B.memid
HAVING MAX( B.starttime );

/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

SELECT CONCAT_WS( ' , ',  M.firstname, M.surname) full_name, F.name
FROM Members AS M
INNER JOIN Bookings AS B ON M.memid = B.memid
INNER JOIN Facilities AS F ON F.facid = B.facid
WHERE F.name LIKE '%tennis court%'
GROUP BY full_name, F.name
ORDER BY full_name; 

/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT CONCAT_WS( ' ', M.surname, M.firstname ) Full_name, F.name,
CASE WHEN M.firstname = 'GUEST'
THEN guestcost * slots
ELSE membercost * slots
END AS cost
FROM Bookings AS B
INNER JOIN Facilities AS F
USING ( facid )
INNER JOIN Members AS M
USING ( memid )
WHERE starttime >= '2012-09-14 00:00:00'
AND starttime < '2012-09-14 24:59:00'
HAVING cost > 30
ORDER BY cost DESC;

/* Q9: This time, produce the same result as in Q8, but using a subquery. */

SELECT CONCAT_WS( ' ', surname, firstname ) Full_name, name AS facility, cost
FROM (
SELECT firstname, surname, name,
CASE WHEN firstname = 'GUEST'
THEN guestcost * slots
ELSE membercost * slots
END AS cost, starttime
FROM Members
INNER JOIN Bookings ON Members.memid = Bookings.memid
INNER JOIN Facilities ON Bookings.facid = Facilities.facid
) AS subquery
WHERE starttime >= '2012-09-14'
AND starttime < '2012-09-15'
AND cost > 30
ORDER BY cost DESC;


/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */


SELECT subquery.name, subquery.revenue
FROM (

SELECT f.name, SUM(
CASE WHEN b.memid =0
THEN b.slots * f.guestcost
ELSE b.slots * f.membercost
END ) AS revenue
FROM `Facilities` AS f
INNER JOIN `Bookings` AS b ON f.facid = b.facid
GROUP BY f.name
) AS subquery
WHERE subquery.revenue <1000
ORDER BY subquery.revenue


/* Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */


SELECT M1.firstname, M1.surname, CONCAT_WS( ' ', M2.surname, M2.firstname ) recommendedby
FROM Members AS M1, Members AS M2
WHERE M1.recommendedby = M2.memid and M1.memid != 0
ORDER BY M1.surname, M1.firstname;



/* Q12: Find the facilities with their usage by member, but not guests */


SELECT f.name, CONCAT_WS(  ' ', m.surname, m.firstname) AS Member, COUNT( f.name ) AS usage_by_member
FROM Members as m
INNER JOIN Bookings as b
ON b.memid = m.memid
INNER JOIN Facilities as f 
ON f.facid = b.facid
WHERE m.memid !=0
GROUP BY f.name, Member
ORDER BY f.name, m.surname, m.firstname;


/* Q13: Find the facilities usage by month, but not guests */

SELECT B.facid, F.name, EXTRACT(MONTH FROM starttime)as month, count(F.name) AS usage_by_month
FROM Members as M
inner join Bookings as B 
on B.memid = M.memid
inner join Facilities as F 
on F.facid = B.facid
where M.memid !=0
GROUP BY F.facid, month ;































